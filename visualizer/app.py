import streamlit as st
from streamlit.runtime.uploaded_file_manager import UploadedFile
from traceroute.results import TraceResult, HopResult
from visualizer.graph import build_topology
from visualizer.ui import draw_topology
import re

def parse_results_file(file: UploadedFile) -> list[TraceResult]:
    traces = []
    content = file.read().decode() if hasattr(file, 'read') else file.read()

    blocks = content.strip().split('\n\n')
    for block in blocks:
        lines = block.strip().split('\n')
        if not lines or not lines[0].startswith('Trace to '):
            continue
       
        dst = lines[0].split('Trace to ')[1].strip(':')
        hops = []
        
        for line in lines[1:]:
            m = re.match(r'TTL (\d+): ([^ ]+) \(([^)]*)\) \[([^]]+)\] RTT=([\d.]+)ms( LOSS)?', line)
            if m:
                ttl = int(m.group(1))
                ip = m.group(2)
                hostname = m.group(3) or None
                proto = m.group(4)
                rtt = float(m.group(5))
                loss = bool(m.group(6))

                hops.append(HopResult(ttl=ttl, ip=ip, rtt=rtt, hostname=hostname, protocol=proto, loss=loss))

        traces.append(TraceResult(destination=dst, hops=hops))
    return traces

def main():
    st.title("Internet Topology Explorer")
    st.write("Upload a traceroute results file to visualize the discovered network topology.")

    uploaded_file = st.file_uploader("Choose a results file", type=["txt"])
    if uploaded_file:
        traces = parse_results_file(uploaded_file)
        st.success(f"Loaded {len(traces)} traces.")

        G = build_topology(traces)
        
        draw_topology(G)
    else:
        st.info("Please upload a results file generated by the CLI.")

if __name__ == "__main__":
    main()
